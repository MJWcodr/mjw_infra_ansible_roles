---
- name: Postfix | Check if postfix is installed
  ansible.builtin.stat:
    path: /usr/sbin/postfix
  register: postfix_cli

# set variable cert_path
- name: Postfix | Set variable cert_path
  set_fact:
    cert_path: /etc/postfix/cert

- name: Postfix | Set variable country
  set_fact:
    country: "DE"

- name: Postfix | Set variable state
  set_fact:
    state: "Berlin"

- name: Postfix | Set variable locality
  set_fact:
    locality: "Berlin"

- name: Postfix | Set variable organization
  set_fact:
    organization: "Matthias WÃ¼nsch"
  
- name: Postfix | Set variable mail_fqdn
  set_fact:
    mail_fqdn: "cronmail.mjwcodr.de"

- name: Postfix | Install postfix
  ansible.builtin.package:
    name: postfix
    state: present
  when: postfix_cli.stat.exists == False

- name: Postfix | Copy main.cf and others
  template:
    src: "{{ item }}.j2"
    dest: /etc/postfix/{{ item }}
    owner: root
    group: root
    mode: 0644
  loop: 
    - main.cf
    - master.cf
    - mysql-virtual-alias-maps.cf
    - mysql-virtual-email2email.cf
    - mysql-virtual-mailbox-domains.cf
    - mysql-virtual-mailbox-maps.cf
  
- name: Postfix | Make sure python-firewall is installed for firewalld (RHEL)
  ansible.builtin.package:
    name: python-firewall
    state: present
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Fedora"

- name: Postfix | Check if firewalld exists
  ansible.builtin.stat:
    path: /usr/bin/firewalld
  register: firewalld

- name: Postfix | Install firewalld
  ansible.builtin.package:
    name: firewalld
    state: present
  when: firewalld.stat.exists == False

- name: Postfix | Start firewalld
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: yes

- name: Postfix | Open port 587
  ansible.builtin.firewalld:
    port: 587/tcp
    permanent: yes
    state: enabled
    immediate: yes

- name: Postfix | Create cert for postfix
  ansible.builtin.shell: |
    mkdir -p {{ cert_path }}
    openssl req -new -x509 -days 3650 -nodes -out {{ cert_path }}/cert.pem -keyout {{ cert_path }}/key.pem -subj "/C={{ country }}/ST={{ state }}/L={{ locality }}/O={{ organization }}/CN={{ mail_fqdn }}"

- name: Postfix | Restart postfix
  ansible.builtin.service:
    name: postfix
    state: restarted

- name: Postfix | Add IP to /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "{{ ansible_ssh_host }} {{ smtp_hostname }} mail"
    state: present
    create: yes

- name: Postfix | Check if certbot is installed
  ansible.builtin.stat:
    path: /usr/bin/certbot
  register: certbot_cli

- name: Postfix | Install certbot
  ansible.builtin.package:
    name: certbot
    state: present
  when: certbot_cli.stat.exists == False

- name: Postfix | Create certbot
  ansible.builtin.shell: |
    certbot certonly --standalone --non-interactive --agree-tos --email {{ mail }} -d {{ smtp_hostname }}

- name: Postfix | Create certbot cronjob
  cron:
    name: "certbot"
    minute: "0"
    hour: "0"
    day: "*/2"
    job: "certbot renew --post-hook \"systemctl restart postfix\""
    state: present

