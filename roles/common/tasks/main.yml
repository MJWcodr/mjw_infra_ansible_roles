---
- include_tasks: checkVariablesSet.yml
  tags: install

- name: Write the new instance host key to known hosts
  connection: local
  shell: "ssh-keyscan -H {{ inventory_hostname }} >> ~/.ssh/known_hosts"
  run_once: true
  args:
    warn: false

- name: User | Create user accounts (rhel based)
  ansible.builtin.user:
    name: "{{ item }}"
    shell: /bin/bash
    groups: wheel
    update_password: on_create
  ignore_errors: true
  loop:
    - ansible
    - "{{ main_user }}"
  when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "Fedora"

- name: User | Create user accounts (debian based)
  ansible.builtin.user:
    name: "{{ item }}"
    shell: /bin/bash
    groups: sudo
    update_password: on_create
  ignore_errors: true
  loop:
    - ansible
    - "{{ main_user }}"
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

- name: User | Set authorized key for user
  ansible.posix.authorized_key:
    user: "{{ item }}"
    state: present
    key: "{{ lookup('file', 'public_keys/{{ item }}.pub') }}"
  ignore_errors: true
  loop:
    - ansible
    - "{{ main_user }}"

- name: User | Add hashed password for main_user if main_user_password_hashed exists
  ansible.builtin.user:
    name: "{{ main_user }}"
    password: "{{ main_user_password_hashed }}"
    update_password: on_create
  when: main_user_password_hashed is defined

- name: install vim, git, python3
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - vim
    - git
    - python3

- name: install cronie (RHEL based)
  ansible.builtin.package:
    name: cronie
    state: present
  when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "Fedora"

- name: Start and enable cronie (RHEL based)
  ansible.builtin.service:
    name: crond
    state: started
    enabled: yes
  when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "Fedora"